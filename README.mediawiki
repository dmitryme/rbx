== RBX is a Report Browser eXtended. ==

=== Overview ===

This is a replacement of native rb (Report Browser Tool). It was implemented in document/view manner.
[https://github.com/dmitryme/rbx/blob/master/src/rbx.erl rbx] module is a document and
[https://github.com/dmitryme/rbx/blob/master/src/rbx_cons.erl rbx_cons],
[https://github.com/dmitryme/rbx/blob/master/src/rbx_inets.erl rbx_inets] are - views.

* [https://github.com/dmitryme/rbx/blob/master/src/rbx.erl rbx] returns tuples, list of tuples w/o formatting.
* [https://github.com/dmitryme/rbx/blob/master/src/rbx_cons.erl rbx_cons] is a console view like rb
* [https://github.com/dmitryme/rbx/blob/master/src/rbx_inets.erl rbx_inets] is a web view. So, using you favorite browser you can explore logs.
* ''You can write you own view best suitable for your needs''

=== Build instruction ===
Just run
<code>./rebar compile</code>

=== How to start ===
Just run
<code>application:start(rbx).</code>

=== Configuration parameters ===
* <code>inets_port <port></code> - httpd port. If not present, <code>8000</code>
* <code>report_dir <path></code> - path to logs. If no paramenter is specified, sasl error_logger_mf_dir is used
* <code>start_log <file_name></code> - rbx_cons will dump output into <code><file_name></code> file instead of stdout

These parameters can be specified in app.config file or passed directly to erl.
E.g. <code>erl -rbx inets_port 8001</code>

=== Modules exports ===

==== Types ====
*'''<code>rep_type</code>''' = atom()
*'''<code>strpid</code>''' = string()
*'''<code>report</code>''' = {pos_integer(), rep_type(), strpid(), calendar:datetime()}
*'''<code>filter</code>''' = {types, [rep_type]} | {reg_exp, string()} | {datetime, {calendar:datetime(), calendar:datetime()}} | {datetime, {from, calendar:datetime()}} | {datetime, {to, calendar:datetime()}
==== rbx ====
*'''<code>rescan(Node, MaxRecords) -> ReportTypes</code>''' - load reports from files
** Node = atom() - node name
** MaxRecords = all | pos_integer() - max records to load
*'''<code>list(Node) -> Reports</code>''' - returns list of reports
** Node = atom() - node name
** Reports = [report]
*'''<code>list(Node, Filters) -> Reports</code>''' -> same as list/1, but applies filters
** Node = atom() - node name
** Filters = [filter] - filter out records
*'''<code>show(Node, ReportNums) -> report()</code>''' - show reports
** Node = atom() - node name
** ReportNums = [pos_integer()] - numbers of reports to show
*'''<code>get_rtypes(Node) -> Types</code>''' - get list of loaded reports
** Node = atom() - node name
** RepTypes = [rep_type()] - loaded report types
==== rbx_cons ====
* '''<code>rescan() -> RepTypes</code>''' - load all reports from file
* '''<code>rescan(MaxReports) -> RepTypes</code>''' - load reports from file
** MaxRecords = all | pos_integer() - max records to load
* '''<code>list() -> Reports</code>''' - returns a list of rports
* '''<code>list(Filters) -> Reports</code>''' - same as list/1, but applies filters
** Filters = [filter] - filter out records
* '''<code>show() -> Reports</code>''' - prints all formatted reports to stdout or file
** Reports = string()
* '''<code>show(NumReps) -> Report</code>''' - prints selected reports to stdout or file
** NumReps = [pos_integer()] - reports to print
** Reports = string()
* '''<code>start_log(Filename) -> ok</code>''' - starts to log into file.
** Filename = string() - file to log
* '''<code>stop_log() -> ok</code>''' - stops logging into file. Back to stdout mode.
* '''<code>attach(Node) -> ok | {error, Reason}</code>''' - attaches to rbx server run on another node - no need to use remove 
** Node = atom() - node to attach
** Reason = string()
* '''<code>detach() -> ok</code>''' - detaches from remote rbx. Back to local one.
* '''<code>attached_node() -> atom()</code>''' - show attached node